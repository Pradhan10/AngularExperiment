import { TestBed, getTestBed } from '@angular/core/testing';

import { DataTableService } from './data-table.service';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { User } from '../models/user.model';
import { HttpErrorResponse, HttpParams } from '@angular/common/http';

describe('DataTableService', () => {
  
  let injector: TestBed;
  let httpMock: HttpTestingController;
  let userService: DataTableService;

  const dummyParams = new HttpParams().set('id','1');

  beforeEach(() =>{ TestBed.configureTestingModule({

      imports:[ HttpClientTestingModule],
      providers:[ DataTableService]
    });
    injector = getTestBed();
    userService = injector.get(DataTableService);
    httpMock = injector.get(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should be created', () => {
    const service: DataTableService = TestBed.get(DataTableService);
    expect(service).toBeTruthy();
  });

  it('should return expected users list Observable (HttpClient called once)', () => {
    const expectedUsers: User[] = [
      {
        id: "1",
        name: "Leanne Graham",
        username: "Bret",
        email: "Sincere@april.biz",
        address: {
          street: "Kulas Light",
          suite: "Apt. 556",
          city: "Gwenborough",
          zipcode: "92998-3874",
          geo: {
            lat: "-37.3159",
            lng: "81.1496"
          }
        },
        phone: "1-770-736-8031 x56442",
        website: "hildegard.org",
        company: {
          name: "Romaguera-Crona",
          catchPhrase: "Multi-layered client-server neural-net",
          bs: "harness real-time e-markets"
        }
      },
      {
        id: "2",
        name: "Ervin Howell",
        username: "Antonette",
        email: "Shanna@melissa.tv",
        address: {
          street: "Victor Plains",
          suite: "Suite 879",
          city: "Wisokyburgh",
          zipcode: "90566-7771",
          geo: {
            lat: "-43.9509",
            lng: "-34.4618"
          }
        },
        phone: "010-692-6593 x09125",
        website: "anastasia.net",
        company: {
          name: "Deckow-Crist",
          catchPhrase: "Proactive didactic contingency",
          bs: "synergize scalable supply-chains"
        }
      }
    ];
   
    userService.getUser().subscribe(users =>{
      expect(users.length).toBe(2);
      expect(users).toEqual(expectedUsers);
    });

    const req = httpMock.expectOne(`${userService.url}`);
    expect(req.request.method).toBe("GET");
    req.flush(expectedUsers);
  });


  it('should return expected user Observable ', () => {
    const expectedUser: User = {
        id: "1",
        name: "Leanne Graham",
        username: "Bret",
        email: "Sincere@april.biz",
        address: {
          street: "Kulas Light",
          suite: "Apt. 556",
          city: "Gwenborough",
          zipcode: "92998-3874",
          geo: {
            lat: "-37.3159",
            lng: "81.1496"
          }
        },
        phone: "1-770-736-8031 x56442",
        website: "hildegard.org",
        company: {
          name: "Romaguera-Crona",
          catchPhrase: "Multi-layered client-server neural-net",
          bs: "harness real-time e-markets"
        }
      };
      
      userService.userId="1";
      userService.getUserInfo().subscribe(user =>{
        expect(user).toEqual(expectedUser);
      });

      const req = httpMock.expectOne(`${userService.url}/1`);
      expect(req.request.method).toBe("GET");
      req.flush(expectedUser);
  });


  it('should return an error when the server returns a 404 for getUser()', () => {
    let response: any;
    let errResponse: any;
    const mockError = {
      status: 404, statusText: 'Bad Request'
    };
    const data = 'Bad Request';

    userService.getUser().subscribe(res => response = res, err => errResponse = err);

    const req = httpMock.expectOne(`${userService.url}`).flush(data, mockError);
    expect(errResponse).toBe(data);

  });


  it('should return an error when the server returns a 404 for getUserInfo()', () => {
    let response: any;
    let errResponse: any;
    const mockError = {
      status: 404, statusText: 'Bad Request'
    };
    const data = 'Bad Request';

    userService.userId="11";
    userService.getUserInfo().subscribe(res => response = res, err => errResponse = err);

    const req = httpMock.expectOne(`${userService.url}/11`).flush(data, mockError);
    expect(errResponse).toBe(data);

  });
});
